{"version":3,"sources":["Game.js","Peg.js","Options.js","App.js","Board.js","serviceWorker.js","index.js"],"names":["LightBoard","setup","ctx","setupData","rows","cols","pegSize","offSet","spacing","bgColor","currentColor","defPeg","color","grid","moves","setRows","G","n","i","push","Array","fill","pop","setCols","forEach","row","pickPeg","setBg","setColor","r","c","setSize","setOffset","setSpacing","setDefPeg","Peg","props","rowNum","coord","colNum","style","position","left","height","width","col","onClick","cx","cy","Options","display","flexDirection","justifyContent","type","value","onChange","e","Number","target","min","max","App","Client","game","numPlayers","board","useEffect","Math","floor","window","innerHeight","innerWidth","gridTemplateColumns","gridTemplateRows","map","key","debug","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+OAAaA,EAAa,CACtBC,MAAO,SAACC,EAAKC,GAAN,MAAqB,CACxBC,KAAM,EACNC,KAAM,EACNC,QAAS,GACTC,OAAQ,EACRC,QAAS,EACTC,QAAS,UACTC,aAAc,UACdC,OAAQ,CACJC,MAAO,WAEXC,KAAM,KAGVC,MAAM,CACFC,QAAS,SAACC,EAAGd,EAAKe,GACd,GAAIA,EAAED,EAAEZ,KACJ,IAAI,IAAIc,EAAE,EAAGA,EAAGD,EAAED,EAAEZ,KAAOc,IACvBF,EAAEH,KAAKM,KAAKC,MAAMJ,EAAEX,MAAMgB,KAAKL,EAAEL,cAEnC,GAAIM,EAAED,EAAEZ,KACV,IAAI,IAAIc,EAAE,EAAGA,EAAGF,EAAEZ,KAAKa,EAAIC,IACvBF,EAAEH,KAAKS,MAGfN,EAAEZ,KAAOa,GAEbM,QAAS,SAACP,EAAGd,EAAKe,GACXA,EAAED,EAAEX,KACHW,EAAEH,KAAKW,SAAQ,SAACC,GACZ,IAAI,IAAIP,EAAE,EAAGA,EAAGD,EAAED,EAAEX,KAAOa,IACvBO,EAAIN,KAAKH,EAAEL,WAGbM,EAAED,EAAEX,MACVW,EAAEH,KAAKW,SAAQ,SAACC,GACZ,IAAI,IAAIP,EAAE,EAAGA,EAAGF,EAAEX,KAAKY,EAAIC,IACvBO,EAAIH,SAIhBN,EAAEX,KAAOY,GAEbS,QAAS,SAACV,EAAGd,EAAKe,GAAKD,EAAEN,aAAeO,GACxCU,MAAO,SAACX,EAAGd,EAAKe,GAAKD,EAAEP,QAAUQ,GACjCW,SAAU,SAACZ,EAAGd,EAAK2B,EAAGC,GAAKd,EAAEH,KAAKgB,GAAGC,GAAV,MAAsBd,EAAEN,cACnDqB,QAAS,SAACf,EAAGd,EAAKe,GAAKD,EAAEV,QAAUW,GACnCe,UAAW,SAAChB,EAAGd,EAAKe,GAAKD,EAAET,OAASU,GACpCgB,WAAY,SAACjB,EAAGd,EAAKe,GAAKD,EAAER,QAAUS,GACtCiB,UAAW,SAAClB,EAAGd,EAAKe,OCpBbkB,MA5Bf,SAAaC,GACT,IAAMC,EAASD,EAAME,MAAM,GACrBC,EAASH,EAAME,MAAM,GAS3B,OACY,yBAAKE,MAAO,CAACC,SAAU,WACnBC,KATRL,EAAO,EACD,GAAN,OAAWD,EAAMpB,EAAET,OAAO,IAAK6B,EAAMpB,EAAEV,QAAvC,MAEO,OAOCqC,OAAQP,EAAMpB,EAAEV,QAChBsC,MAAOR,EAAMpB,EAAEV,QACfe,KAAMe,EAAMS,IAAIjC,MAChBkC,QAAS,WAAKV,EAAMtB,MAAMc,SAASS,EAAQE,KAE3C,4BACIQ,GAAIX,EAAMpB,EAAEV,QAAQ,EACpB0C,GAAIZ,EAAMpB,EAAEV,QAAQ,EACpBuB,EAAGO,EAAMpB,EAAEV,QAAQ,M,MCwC5B2C,MA7Df,SAAiBb,GACb,OACI,0BACII,MAAO,CACHU,QAAS,OACTC,cAAe,MACfC,eAAgB,iBAEhB,sCAEI,2BACIC,KAAK,SACLC,MAAOlB,EAAMpB,EAAEZ,KACfmD,SAAU,SAACC,GAAD,OAAMpB,EAAMtB,MAAMC,QAAQ0C,OAAOD,EAAEE,OAAOJ,SACpDK,IAAI,OAEJ,yCAEJ,2BACIN,KAAK,SACLC,MAAOlB,EAAMpB,EAAEX,KACfkD,SAAU,SAACC,GAAD,OAAMpB,EAAMtB,MAAMS,QAAQkC,OAAOD,EAAEE,OAAOJ,SACpDK,IAAI,OAEJ,sCAEJ,2BACIN,KAAK,SACLC,MAAOlB,EAAMpB,EAAEV,QACfiD,SAAU,SAACC,GAAD,OAAMpB,EAAMtB,MAAMiB,QAAQ0B,OAAOD,EAAEE,OAAOJ,SACpDK,IAAI,OAEJ,yCAEJ,2BACIN,KAAK,SACLC,MAAOlB,EAAMpB,EAAER,QACf+C,SAAU,SAACC,GAAD,OAAMpB,EAAMtB,MAAMmB,WAAWwB,OAAOD,EAAEE,OAAOJ,YAEvD,wCAEJ,2BACID,KAAK,QACLC,MAAOlB,EAAMpB,EAAET,OACfgD,SAAU,SAACC,GAAD,OAAMpB,EAAMtB,MAAMkB,UAAUyB,OAAOD,EAAEE,OAAOJ,SACtDK,IAAI,MACJC,IAAI,QAEJ,8CAEJ,2BACIP,KAAK,QACLC,MAAOlB,EAAMpB,EAAEN,aACf6C,SAAU,SAACC,GAAD,OAAMpB,EAAMtB,MAAMY,QAAQ8B,EAAEE,OAAOJ,aC7CtDO,EAPHC,YAAO,CACjBC,KAAM/D,EACNgE,WAAY,EACZC,MCHmB,SAAC7B,GAOlB,OALA8B,qBAAU,WACN9B,EAAMtB,MAAMC,QAAQoD,KAAKC,MAA0B,IAAnBC,OAAOC,YAAiB,KACxDlC,EAAMtB,MAAMS,QAAQ4C,KAAKC,MAAyB,IAAlBC,OAAOE,WAAgB,OACzD,CAACnC,EAAMtB,QAGL,oCACI,kBAAC,EAAD,CAASA,MAAOsB,EAAMtB,MAAOE,EAAGoB,EAAMpB,IACtC,0BAAMwB,MAAO,CACTC,SAAU,WACVW,eAAgB,SAChBF,QAAS,OACTsB,oBAAoB,UAAD,OAAYpC,EAAMpB,EAAEX,KAApB,aAA8B+B,EAAMpB,EAAEV,QAAU8B,EAAMpB,EAAER,QAAxD,OACnBiE,iBAAiB,UAAD,OAAYrC,EAAMpB,EAAEZ,KAApB,aAA8BgC,EAAMpB,EAAEV,QAAU8B,EAAMpB,EAAER,QAAxD,SAEf4B,EAAMpB,EAAEH,KAAK6D,KAAI,SAACjD,EAAKI,GAAN,OACdJ,EAAIiD,KAAI,SAAC7B,EAAKf,GAAN,OACR,kBAAC,EAAD,CAAKd,EAAGoB,EAAMpB,EAAG6B,IAAKA,EAAK/B,MAAOsB,EAAMtB,MAAOwB,MAAO,CAACT,EAAGC,GAAI6C,IAAG,UAAK9C,EAAL,YAAUC,cDf7F8C,OAAO,IEIHC,EAAcC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDanB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,cAAwBvC,OAAOU,SAAS8B,MACpDC,SAAWzC,OAAOU,SAAS+B,OAIvC,OAGFzC,OAAO0C,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,cAAN,sBAEP/B,IAgEV,SAAiCM,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BnB,OAAOU,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCnC/BE,K","file":"static/js/main.31369ea5.chunk.js","sourcesContent":["export const LightBoard = {\r\n    setup: (ctx, setupData) => ({\r\n        rows: 0,\r\n        cols: 0,\r\n        pegSize: 25,\r\n        offSet: 0,\r\n        spacing: 0,\r\n        bgColor: \"#333333\",\r\n        currentColor: \"#000000\",\r\n        defPeg: {\r\n            color: \"#000000\",\r\n        },\r\n        grid: [],\r\n    }),\r\n    \r\n    moves:{\r\n        setRows: (G, ctx, n)=>{\r\n            if (n>G.rows){\r\n                for(let i=0; i<(n-G.rows); i++){\r\n                    G.grid.push(Array(G.cols).fill(G.defPeg));\r\n                };\r\n            }else if (n<G.rows){\r\n                for(let i=0; i<(G.rows-n); i++){\r\n                    G.grid.pop();\r\n                };\r\n            };\r\n            G.rows = n;\r\n        },\r\n        setCols: (G, ctx, n)=>{\r\n            if(n>G.cols){\r\n                G.grid.forEach((row)=>{\r\n                    for(let i=0; i<(n-G.cols); i++){\r\n                        row.push(G.defPeg);\r\n                    };\r\n                });\r\n            }else if (n<G.cols){\r\n                G.grid.forEach((row)=>{\r\n                    for(let i=0; i<(G.cols-n); i++){\r\n                        row.pop();\r\n                    };\r\n                });\r\n            }\r\n            G.cols = n;\r\n        },\r\n        pickPeg: (G, ctx, n)=>{G.currentColor = n;},\r\n        setBg: (G, ctx, n)=>{G.bgColor = n;},\r\n        setColor: (G, ctx, r, c)=>{G.grid[r][c][\"color\"]=G.currentColor},\r\n        setSize: (G, ctx, n)=>{G.pegSize = n;},\r\n        setOffset: (G, ctx, n)=>{G.offSet = n;},\r\n        setSpacing: (G, ctx, n)=>{G.spacing = n;},\r\n        setDefPeg: (G, ctx, n)=>{},\r\n    },\r\n\r\n}","import React from 'react';\r\n\r\nfunction Peg(props){\r\n    const rowNum = props.coord[0];\r\n    const colNum = props.coord[1];\r\n    const offset = () => {\r\n        if (rowNum%2){\r\n            return `${(props.G.offSet/100)*props.G.pegSize}px`;\r\n        }else{\r\n            return \"0px\";\r\n        }\r\n    }\r\n\r\n    return ( \r\n                <svg style={{position: \"relative\",\r\n                    left: offset()}}\r\n                    height={props.G.pegSize}\r\n                    width={props.G.pegSize}\r\n                    fill={props.col.color}\r\n                    onClick={()=>{props.moves.setColor(rowNum, colNum)}}\r\n                    >\r\n                    <circle \r\n                        cx={props.G.pegSize/2}\r\n                        cy={props.G.pegSize/2}\r\n                        r={props.G.pegSize/2}\r\n                        />\r\n                </svg>\r\n    )\r\n}\r\n\r\nexport default Peg","import React from 'react';\r\nimport './Options.css';\r\n\r\nfunction Options(props){\r\n    return (\r\n        <form \r\n            style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                justifyContent: 'space-around'\r\n            }}>\r\n                <label>\r\n                    Rows\r\n                    <input \r\n                        type=\"number\" \r\n                        value={props.G.rows} \r\n                        onChange={(e)=> props.moves.setRows(Number(e.target.value))}\r\n                        min=\"0\"\r\n                         />\r\n                </label><label>\r\n                    Columns\r\n                    <input \r\n                        type=\"number\" \r\n                        value={props.G.cols} \r\n                        onChange={(e)=> props.moves.setCols(Number(e.target.value))}\r\n                        min=\"0\"\r\n                        />\r\n                </label><label>\r\n                    Size\r\n                    <input \r\n                        type=\"number\" \r\n                        value={props.G.pegSize} \r\n                        onChange={(e)=> props.moves.setSize(Number(e.target.value))}\r\n                        min=\"0\"\r\n                        />\r\n                </label><label>\r\n                    Spacing\r\n                    <input \r\n                        type=\"number\" \r\n                        value={props.G.spacing} \r\n                        onChange={(e)=> props.moves.setSpacing(Number(e.target.value))}\r\n                        />\r\n                </label><label>\r\n                    Offset\r\n                    <input \r\n                        type=\"range\" \r\n                        value={props.G.offSet} \r\n                        onChange={(e)=> props.moves.setOffset(Number(e.target.value))}\r\n                        min=\"-95\"\r\n                        max=\"95\"\r\n                        />\r\n                </label><label>\r\n                    Grab a color\r\n                    <input \r\n                        type=\"color\" \r\n                        value={props.G.currentColor} \r\n                        onChange={(e)=> props.moves.pickPeg(e.target.value)}\r\n                        />\r\n                </label>\r\n                \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Options;","import { Client } from  'boardgame.io/react';\r\nimport { LightBoard } from './Game';\r\nimport { Board } from './Board';\r\n\r\nconst App = Client({\r\n  game: LightBoard,\r\n  numPlayers: 1,\r\n  board: Board,\r\n  debug: false,\r\n})\r\n\r\nexport default App;","import React, { useEffect } from 'react';\r\nimport Peg from './Peg'\r\nimport Options from './Options'\r\n\r\nexport const Board = (props)=>{\r\n    \r\n    useEffect(()=>{\r\n        props.moves.setRows(Math.floor((window.innerHeight*.96)/25));\r\n        props.moves.setCols(Math.floor((window.innerWidth*.98)/25));\r\n    },[props.moves])\r\n    \r\n    return(\r\n        <>  \r\n            <Options moves={props.moves} G={props.G} />\r\n            <main style={{\r\n                position: \"relative\",\r\n                justifyContent: \"center\",\r\n                display: \"grid\",\r\n                gridTemplateColumns: `repeat(${props.G.cols}, ${(props.G.pegSize + props.G.spacing)}px)`,\r\n                gridTemplateRows: `repeat(${props.G.rows}, ${(props.G.pegSize + props.G.spacing)}px)`,\r\n            }}>\r\n                {props.G.grid.map((row, r) => \r\n                    row.map((col, c)=> \r\n                    <Peg G={props.G} col={col} moves={props.moves} coord={[r, c]} key={`${r} ${c}`}/>))}\r\n            </main>\r\n        </>\r\n    );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}